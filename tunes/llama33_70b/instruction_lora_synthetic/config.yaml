# Config for multi-device LoRA in lora_finetune_distributed.py
# using a Llama3.3 70B model
#
# This config assumes that you've run the following command before launching
# this run:
#   tune download meta-llama/Llama-3.3-70B-Instruct --ignore-patterns "original/consolidated*"
#
# This config needs 8 GPUs to run
#   tune run --nproc_per_node 8 lora_finetune_distributed --config llama3_3/70B_lora

output_dir: /hkfs/work/workspace_haic/scratch/zn2950-llms/tunes/llama33_70b/instruction_lora

# Model Arguments
model:
  _component_: torchtune.models.llama3_3.lora_llama3_3_70b
  lora_attn_modules: ['q_proj', 'k_proj', 'v_proj', 'output_proj']  # Remove 'output_proj' 
  apply_lora_to_mlp: False #TODO!
  apply_lora_to_output: False
  lora_rank: 32  # higher increases accuracy and memory (try 8 later)
  lora_alpha: 64  # usually alpha=2*rank
  lora_dropout: 0.0

tokenizer:
  _component_: torchtune.models.llama3.llama3_tokenizer
  path: /hkfs/work/workspace_haic/scratch/zn2950-llms/base_models/Llama-3.3-70B-Instruct/original/tokenizer.model
  max_seq_len: 2048

checkpointer:
  _component_: torchtune.training.FullModelHFCheckpointer
  checkpoint_dir: /hkfs/work/workspace_haic/scratch/zn2950-llms/base_models/Llama-3.3-70B-Instruct/
  checkpoint_files:
    filename_format: model-{}-of-{}.safetensors
    max_filename: "00030"
  recipe_checkpoint: null
  output_dir: ${output_dir}
  model_type: LLAMA3
resume_from_checkpoint: False
save_adapter_weights_only: False # Set to false to save the whole model + adapter merged

# Dataset and Sampler
dataset:
  _component_: torchtune.datasets.instruct_dataset
  source: json
  data_files: /home/iti/zn2950/home/ws/data/synthetic_data/synthetic_instruct_dataset.json
  split: train
  packed: True
shuffle: True
batch_size: 1
seed: 42

# Optimizer and Scheduler
optimizer:
  _component_: torch.optim.AdamW
  fused: True
  lr: 1e-4
lr_scheduler:
  _component_: torchtune.training.lr_schedulers.get_cosine_schedule_with_warmup
  num_warmup_steps: 20

loss:
  _component_: torchtune.modules.loss.CEWithChunkedOutputLoss

# Training
epochs: 5
max_steps_per_epoch: null
gradient_accumulation_steps: 1  # Use to increase effective batch size
compile: True  # torch.compile the model + loss, True increases speed + decreases memory
fsdp_cpu_offload: True  # Add this to enable CPU offloading with FSDP
# Logging
metric_logger:
  _component_: torchtune.training.metric_logging.DiskLogger
  log_dir: ${output_dir}/logs
log_every_n_steps: 1
log_peak_memory_stats: True

# Environment
device: cuda
dtype: bf16
enable_activation_checkpointing: True
enable_activation_offloading: True  # Change to True for significant memory savings
optimizer_in_bwd: True # Add this to fuse optimizer step into backward pass
custom_sharded_layers: ['tok_embeddings', 'output']  # Layers to shard separately (useful for large vocab size models). Lower Memory, but lower speed.

# Profiler (disabled)
profiler:
  _component_: torchtune.training.setup_torch_profiler
  enabled: False

  #Output directory of trace artifacts
  output_dir: ${output_dir}/profiling_outputs

  #`torch.profiler.ProfilerActivity` types to trace
  cpu: True
  cuda: True

  #trace options passed to `torch.profiler.profile`
  profile_memory: False
  with_stack: False
  record_shapes: True
  with_flops: False

  # `torch.profiler.schedule` options:
  # wait_steps -> wait, warmup_steps -> warmup, active_steps -> active, num_cycles -> repeat
  wait_steps: 5
  warmup_steps: 3
  active_steps: 2
  num_cycles: 1